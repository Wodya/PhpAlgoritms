1. Поиск элемента массива с известным индексом
    Массив, расположенный последовательно в памяти:
    a. Сложение адреса начального элемента с индексом*размер = O(1)
    б. Выборка из памяти по полученному указателю = O(1)
    Итоговая сложность O(1)

    Массив в PHP (связанный список с basket). Операции:
    а. Нахождение хэша = O(1)
    б. Поиск хэша в сортировоном массиве хэшей и получение basket (предположим двоичный поиск) = O(log(n))
    в. Перебор busket для поиска ключа. В общем случае O(1)
    Итоговая сложность = сложность поиска хэша в хэш-таблице = O(log(n))

2. Дублирование одномерного массива через foreach
    a. Проход массива-источника = O(n)
    б. Чтение элемента-источника = O(1)
    в. Запись в массив-приёмник = O(1)

    Итоговая сложность = O(n)

3. Рекурсивная функция нахождения факториала числа
    Увеличение входного числа на 1 приводит по сути к полному дубированию существующей ветки
    Итоговая сложность 2^(n-1) => O(2^n)

4. Удаление элемента массива с известным индексом
    Массив, расположенный последовательно в памяти:
    а. Сложение адреса начального элемента с (индексом+1)*размер = O(1)
    б. Сдвиг элементов с найденного указателя до конца массива на один элемент назад, в общем случае (если элемент в начале таблицы) = O(n)
    в. Изменение размера массива = О(1)
    Итоговая сложность = O(n)

    Массив в PHP (связанный список с basket). Операции:
    а. Нахождение хэша = O(1)
    б. Поиск хэша в сортировоном массиве хэшей и получение basket (предположим двоичный поиск) = O(log(n))
    в. Далее как в случае с массивом, расположенным последовательно в памяти = O(n)
    Итоговая сложность = сложность поиска хэша в хэш-таблице = O(log(n) + n) = O(n)


